package main

import (
	"fmt"
	"os"
)

/*
var声明语句可以创建一个特定类型的变量，然后给变量附加一个名字，并且设置变量的初始值。

语法：
	var 变量名字 类型 = 表达式

“类型”或“= 表达式”两个部分可以省略其中的一个
如果省略的是类型信息，那么将根据初始化表达式来推导变量的类型信息
如果初始化表达式被省略，那么将用零值初始化该变量

数值类型变量对应的零值是0，布尔类型变量对应的零值是false，
字符串类型对应的零值是空字符串，接口或引用类型（包括slice、指针、map、chan和函数）变量对应的零值是nil

*/

func demo1()  {
	var s string
	fmt.Println(s)
}


// 也可以在一个声明语句中同时声明一组变量，或用一组初始化表达式声明并初始化一组变量。
//如果省略每个变量的类型，将可以声明多个类型不同的变量（类型由初始化表达式推导）
func demo2()  {
	var i, j, k int
	var b, f, s = true, 2.33, "string"
}

// 初始化表达式可以是字面量或任意的表达式。
// 在包级别声明的变量会在main入口函数执行前完成初始化, 局部变量将在声明语句被执行到的时候完成初始化。

// 一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化
func demo3()  {
	var f, err = os.Open(name) // os.Open returns a file and an error
}




// 简短变量声明
// 在函数内部，有一种称为简短变量声明语句的形式可用于声明和初始化局部变量
//它以“名字 := 表达式”形式声明变量，变量的类型根据表达式来自动推导
//因为简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。
//var形式的声明语句往往是用于需要显式指定变量类型的地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方
func demo4()  {
	t := 3.0
}


// 指针
/*
一个指针的值是另一个变量的地址。一个指针对应变量在内存中的存储位置。
并不是每一个值都会有一个内存地址，但是对于每一个变量必然有对应的内存地址。
通过指针，我们可以直接读或更新对应变量的值，而不需要知道该变量的名字（如果变量有名字的话）。

如果用“var x int”声明语句声明一个x变量，那么&x表达式（取x变量的内存地址）将产生一个指向该整数变量的指针，
指针对应的数据类型是*int，指针被称之为“指向int类型的指针”
如果指针名字为p，那么可以说“p指针指向变量x”，或者说“p指针保存了x变量的内存地址”。

同时*p表达式对应p指针指向的变量的值。一般*p表达式读取指针指向的变量的值，这里为int类型的值，
同时因为*p对应一个变量，所以该表达式也可以出现在赋值语句的左边，表示更新指针所指向的变量的值。

*/


/*
new函数

创建变量的方法是调用内建的new函数。表达式new(T)将创建一个T类型的匿名变量，初始化为T类型的零值，然后返回变量地址，返回的指针类型为*T

 */



func main() {
	demo1()
}
